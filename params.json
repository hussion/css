{"name":"CSS札记","tagline":"","body":"### ie6和现代浏览器的bug\r\n\r\n<h5><center>IE6 css bug 和触发条件</center></h5>  \r\n##### ie6下浮动元素，左margin双边距 触发条件(block+float+margin-left+紧挨着父级)  \r\n连续的浮动元素，当设置了左浮动的时候，第一个元素的左margin-left出现双倍间距  \r\n**例：**  \r\n> .test {float: left; margin-left: 10px}  \r\n  \r\n**解决办法：**  \r\n加入display:inline解决问题  \r\n##### ie6下浮动元素和非浮动定宽元素之间 3px bug 触发条件(block+float+非浮动元素定宽)  \r\n浮动元素，假如右边元素是定宽在ie6中出现两者之间有3px的bug,而且还会让相邻的定宽的元素浮动  \r\n**例：**  \r\n> .test1 {float: left;}  \r\n  .test2 {width: 300px;}\r\n  \r\n**解决办法：**  \r\n在浮动元素加上ie6 css hack _margin-right: -3px;或者在非浮动元素加上float: left解决问题 \r\n##### ie6下定宽基数bug 触发条件(宽基数+相对定位(外元素)+绝对定位 + right(内元素))  \r\n两个嵌套元素，外元素的宽度为基数并且是相对定位的，内元素是绝对定位切设置了right,在ie6下出现了right: 1px的间距bug \r\n**例：**  \r\n> .test1 {position: relative; width: 399px;} *外元素*  \r\n  .test2 {position: absolute; right: 0} *内元素*\r\n  \r\n**解决办法：**  \r\n将外层元素的宽设置为偶数  \r\n##### 父容器适应浮动子容器的高 触发条件(不定高(父元素)+float(子元素))  \r\n两个嵌套元素，父元素的不定高，子元素浮动后出现了，父元素不会被子元素所填充 \r\n**例：**  \r\n> .test1 {background: green;} *父元素*   \r\n  .test2 {float: left;height: 300px} *子元素*\r\n  \r\n**解决办法：**  \r\n将外层元素的宽设置为偶数  \r\n##### ie6伪类css失效 触发条件(定义带有-连接符的伪类+伪类名称和{}之间没有空格)\r\n定义一个伪类，伪类中包括-连接符后 所设置的css失效   \r\n**例：**  \r\n> .test:first-letter{font-size: 300%;}  \r\n\r\n**解决办法：**   \r\n伪类名和{}之间留1个空格\r\n##### ie6、7空标签的最小高度bug 触发条件(block+没有定高)\r\nie6、7中没有定高的块元素默认高度是13px，但是他们之间的区别是\r\nie6中如果你设置的高度小于13px那么他的高度并不会是你设置的值，而是保持13px不变，然而在ie7中设置多少就是多少   \r\n**例：**  \r\n> .test {width: 100px;}  \r\n\r\n**解决办法：**  \r\n> .test {width: 100px; height:5px; overflow: hidden}\r\n##### 现代浏览器非ie6、7 图片的下间距有4px bug\r\n在现代浏览器中图片下方和父容器至少有4px的间距bug   \r\n**解决办法：**  \r\n> 设置图片的css img {display:block},定位方式 img{vertical-align: top}父容器定高加overflow: hidden  \r\n##### ie6、7下li与li底部有2px间距 Bug 触发条件(li定宽+li子元素是浮动)\r\n在现代浏览器中当li定宽和其内部有浮动的元素的时候，出现了li与li之间有2px的下间距   \r\n**解决办法：**  \r\n> 设置li的vertical-align: middle\r\n\r\n\r\n### ie6、7的hasLayout\r\n\r\n**在表格布局的时代。几乎是所有的元素（除了内联内容）都是一个盒子。内容几乎不可能超过表格的**  \r\n  \r\n过了许多年，ie使用了trident内核去渲染html,这个内核就是使用css来进行布局,css布局改变了原来表格布局的初衷，它是通过父元素来定位子元素的，但是css允许子元素超出父元素  \r\n  \r\n为了解决这个问题，microsoft决定用hasLayout去改善。每个元素都有hasLayout这个属性(ie8已经废除了这个属性)。\r\n  \r\n当一个元素disabled hasLayout后，那么这个元素只能通过父元素来渲染它，这也是ie很多bug的诞生。  \r\n  \r\nhaslayout不是一个CSS属性，你不能这样的来设置(**可以在js中使用element.currentStyle.hasLayout**)它 haslayout:true;一个元素被设置成haslayout：true将被渲染成一个 haslayout，反之。  \r\n  \r\n**一些元素本身就触发了hasLayout**  \r\n *哪些元素本身触发了hasLayout*  \r\n  \r\n+ &lt;html&gt; &lt;body&gt;&lt;div&gt;\r\n+ &lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;td&gt;\r\n+ &lt;ifram&gt;&lt;img&gt;\r\n+ &lt;hr&gt;\r\n+ &lt;input&gt;&lt;button&gt;&lt;select&gt;&lt;textarea&gt;  \r\n  \r\n**如何设置hasLayout**  \r\n *哪些元素可以设置hasLayout=true*\r\n  \r\n+ position: absolute\r\n+ float: left || right\r\n+ display: inline-block\r\n+ width: any || auto\r\n+ height: any || auto\r\n+ zoom: 1\r\n+ max-width: any || auto(ie7)\r\n+ max-height: any || auto(ie7)\r\n+ min-width: any || auto(ie7)\r\n+ min-height: any || auto(ie7)\r\n  \r\n**bug**\r\n多年的切图经验来看(装逼下)ie80%的bug是由于没有设置hasLayout而导致的，所以碰到了很难解释的问题，第一件事就是触发hasLayout  \r\n  \r\n**怎样利用hasLayout解决bug**\r\n  \r\n+ **left定位Bug**  \r\n例：  \r\n> div(style=\"position:relative;border:1px solid orange;text-align:right;\")\r\n            a(href=\"http://hi.baidu.com\") http://hi.baidu.com\r\n            div(style=\"position:absolute;top:0;left:0;background:#CCC;\") 帅哥  \r\n  \r\n*分析：*  \r\n如果position:absolute的父层，也就是position:relative的层没有设置宽或高，那么在IE6下，出现left错位的bug，其原因是没有触发haslayout。  \r\n\r\n*解决方法：*  \r\n1. 给position:relative层加上width或height；2. 给position:relative层加上zoom:1，触发layout。\r\n  \r\n  \r\n+ **IE6/7负margin隐藏Bug：**  \r\n例：  \r\n> div(style=\"float: left; width: 500px; height: 200px;border: 1px solid red;margin-left:100px\")\r\n            span(style=\"margin-left: -10px\") 1423432432432432432432222222222222222  \r\n  \r\n*分析：*  当给一个有hasLayout的父元素内的非hasLayout元素设置负marin时，超出父元素部分不可见，iE6/7独有的hasLayout产生问题。 \r\n\r\n*解决方法：*  \r\n1. 赋hasLayout给子元素,并添加position:relative  \t\r\n\r\n\r\n\r\n### CSS Reset\r\n\r\n\r\n##### CSS Reset是什么?\r\nhtml标签在浏览器有默认的样式，例如p有上下样式,strong有加粗样式,em有字体倾斜样式，不同浏览器的默认样式也有差别，例如ul带有缩进的在ie中，是通过margin而在ff中是通过padding,每个默认的样式会带来开发中的麻烦，影响开发效率，所以解决的办法是一开始将浏览器的默认样式全部去掉，更准确的是覆盖掉浏览器的默认css样式，这就是css reset  \r\n  \r\n##### 为什么要重置它?\r\n因为浏览器很多，默认的样式又不同，影响开发效率，然后我们通过重置标签的css属性，然后在统一定义，就可以产生相同的显示的效果  \r\n  \r\n##### CSS Reset的内容是什么？\r\n最简单的css reset\r\n> \\* { padding: 0; margin: 0; border: 0; }  \r\n  \r\n让所有的html元素的padding,margin,border清空达到显示相同的效果\r\n> body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,\r\nform,fieldset,input,textarea,p,blockquote,th,td {\r\npadding: 0;\r\nmargin: 0;\r\n}  \r\n\r\n> table {\r\nborder-collapse: collapse;\r\nborder-spacing: 0;\r\n}  \r\n\r\n> fieldset,img {\r\nborder: 0;\r\n}  \r\n\r\n> address,caption,cite,code,dfn,em,strong,th,var {\r\nfont-weight: normal;\r\nfont-style: normal;\r\n}  \r\n\r\n> ol,ul {\r\nlist-style: none;\r\n}  \r\n\r\n> caption,th {\r\ntext-align: left;\r\n}  \r\n\r\n> h1,h2,h3,h4,h5,h6 {\r\nfont-weight: normal;\r\nfont-size: 100%;\r\n}  \r\n\r\n> q:before,q:after {\r\ncontent:'';\r\n}\r\nabbr,acronym { border: 0;\r\n}  \r\n\r\n大家可以看得出来，这些内容方法不同，但功能大同小异，都是起到重置的作用，所以说CSS Reset是根据个人需求不同可以按需自定义的。\r\n\t\r\n\r\n### CSS的属性和原理\r\n\r\n##### margin-right和margin-bottom的区别  \r\nmargin-right本意是元素的右边距离父元素的右边或者兄弟元素的左边之间的距离。  \r\n当设置值的时候，假如是与父元素相邻，那么设置margin-right就是当前元素的右边和父元素的右边的距离，控制点是当前元素。  \r\n假如是与兄弟元素相邻，那么设置margin-right是兄弟元素的左边和当前元素右边的距离，控制点在兄弟元素。  \r\n##### **还有另外一种情况，就是当元素不定宽的时候并且相邻于父元素的时候**  \r\n当设置margin-right:正值的时候，相应的元素宽度就会减掉多少，为什么呢？  \r\n因为一个盒模型的width=margin+border+padding+width(内容)，本来一个块元素的width继承于父元素的width,当设置margin-left或者margin-righ，当前元素或多或少的向左向右移动了距离，那么当前元素就和父元素产生了距离，所以当前元素铺满的width也就减少了。  \r\n  \r\n当设置margin-bottom的时候，父元素为不定高的情况，margin-bottom是可以控制父元素的高度的。\r\n\r\n\r\n### CSS的原理及优化\r\n\r\n在写css代码的时候，做些简单的优化，可以提升渲染的性能  \r\n### 浏览器是如何渲染页面和加载页面的？  \r\n我们有些时候打开网页加载会很慢，而且是整个页面同时显示，而有些页面是从上到下依次显示  \r\n1、 浏览器下载的顺序从上到下，渲染的顺序是从上到下，下载和渲染是并行执行的  \r\n2、 如果遇到语义解释性的标签嵌入文件(js脚本、css文件)，会并行的下载，那么在下载后进行解析，解析的过程是阻塞下面元素的渲染，解析完成后对所有以前加载好的元素进行渲染  \r\n3、**渲染效率与下面三点有关**  \r\n\t(一)、css选择器的查询定位效率  \r\n\t(二)、浏览器的渲染模式和算法  \r\n\t(三)、进行渲染的大小  \r\n##### 使用css布局比table有哪些优势\r\n\t1、表现和内容相分离，将用于展现的剥离出一个文件，html只放内容，有利于搜索引擎。\r\n\t2、使用css布局比使用table布局代码量少将近1半，避免浏览器渲染大量冗长的标签。\r\n\t3、易于维护，改版后只需要修改文件就可以重新定义页面的样式。\r\n##### 浏览器对css\r\n\t1、css匹配是从右到左匹配，比如DIV#divBox p span.red{color:red;} 浏览器的查找顺序如下，先查找html中所有class=\"red\"的span元素，找到后，查找父元素是否有p元素，在判断p元素是否有id=divBox的div元素，如果都存在则css匹配成功  \r\n\t2、浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。firefox称这种查 找方式为keyselector(关键字查询)，所谓的关键字就是样式规则中最后(最右边)的规则，上面的key就是span.red。  \r\n### 优化你的css\r\n* css 命名 、书写规范；（好的代码看上去就很整齐 很有条理性这样方便日后的维护和管理）  \r\n* css优先级； 选择器权重：内联样式：1000，id选择器：1000， class选择器：10，标签选择器：1  注意权重的问题。  \r\n* 少用滤镜，少用hack，少用position：absolute；。  \r\n* 多用继承属性。  \r\n* 使用简写样式：例如margin: 10px; 浏览器会解释为上下左右各有10px的外补丁。margin： 0 10px 浏览器解析为 左右有10px的外补丁。  \r\n* 不要在ID选择器和class选择器前 使用标签名 例如：div.box { color: #f00; }; 直接 可以 用类名， .box { color:#f00;}  这样浏览器找到这个class后 就不用再匹配是否存在div标签.从而提高了渲染效率。当然同一级的 有不同的样式可以这样写，但是不建议这样。  \r\n* css的层级关系不要太深 用class直接代替多余的层级元素。例如 .box .box-con .box-list li { line-height: 24px; } 这么长。。。增加代码量减小开发效率。刚也说了，css渲染是从上到下，从右到左的\r\n所以直接这样写就可以了.box-list li { line-height: 24px; };  \r\n* 平铺背景图片不要过小，影响渲染速率。  \r\n* float使用要谨慎。  \r\n* 合理化布局（模块化布局）；可以把样式划分为 基类 和扩展类 ;模块化布局 ：模块基本相同的样式写在 基类里，不同的在重新用class来定义称为扩展类 。  \r\n* 在css渲染效率中id和class的效率是基本相当的\r\n\r\nclass最在第一次载入中被缓存，在层叠中会有更加好的效果，在根部元素采用id会具有更加好（id有微妙的速度优势）。\r\n在css渲染效率中id和class的效率是基本相当的\r\n\r\nclass最在第一次载入中被缓存，在层叠中会有更加好的效果，在根部元素采用id会具有更加好（id有微妙的速度优势）。\r\n\t","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}